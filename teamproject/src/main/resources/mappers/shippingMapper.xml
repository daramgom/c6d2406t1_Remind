<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mapper.ShippingMapper">
    <!-- 출고 정보 입력 -->  
    <insert id="insertShippingRequest" parameterType="com.itwillbs.domain.ShippingVO">
        INSERT INTO shipping_info (
            shp_manager_id,  -- 출고 요청자 ID
            shp_supervisor_id,  -- 출고 승인자 ID
            cord_number, 
            prod_id, 
            prod_category, 
            prod_name, 
            company_code, 
            shp_quantity, 
            shp_price, 
            cord_date, 
            shp_date, 
            shp_remarks,
            wh_number,
            shp_number,
            shp_status,  -- shp_status를 추가
            shp_count     -- shp_count를 마지막에 위치
        ) VALUES (
            #{shp_manager_id}, 
            #{shp_supervisor_id}, 
            #{cord_number}, 
            #{prod_id}, 
            #{prod_category}, 
            #{prod_name}, 
            #{company_code}, 
            #{shp_quantity}, 
            #{shp_price}, 
            #{cord_date}, 
            #{shp_date}, 
            #{shp_remarks},
            #{wh_number},            
            (SELECT CONCAT('SHP-', YEAR(CURRENT_DATE), '-', LPAD(IFNULL(MAX(SUBSTRING(shp_number, -4)), 0) + 1, 4, '0'))
             FROM (SELECT shp_number FROM shipping_info WHERE shp_number LIKE CONCAT('SHP-', YEAR(CURRENT_DATE), '%')) AS temp),
            '01',  -- shp_status에 '01' 값 추가
            (SELECT COALESCE(MAX(shp_count), 0) + 1 FROM (SELECT shp_count FROM shipping_info) AS temp2)  -- shp_count
        )
    </insert>

    <!-- 발주 관리번호로 다른 정보들 가져오기 -->
    <select id="getShippingInfoByCorderNumber" parameterType="string" resultType="com.itwillbs.domain.CordersVO">
		SELECT 
		    c.cprod_id, 
		    c.ccompany_code, 
		    c.cord_price, 
		    c.cord_date,
		    p.prod_name AS cprod_name,  -- pord 테이블의 pord_name
		    p.prod_category AS cprod_category  -- pord 테이블의 prod_category
		FROM 
		    corders c
		JOIN 
		    prod p ON c.cprod_id = p.prod_id  -- pord 테이블과 조인
		WHERE 
		    c.cord_number =  #{cord_number};  -- 발주 관리번호로 필터링
    </select>

    <!-- 출고 정보 가져오기 -->
    <select id="getAllShippingRequests" resultType="com.itwillbs.domain.ShippingVO">
        SELECT s.*, 
               m_requester.member_name AS shp_manager_name,  -- 출고 요청자 이름
               m_supervisor.member_name AS shp_supervisor_name  -- 출고 승인자 이름
        FROM shipping_info s
        LEFT JOIN member m_requester ON s.shp_manager_id = m_requester.member_id  -- 출고 요청자 조인
        LEFT JOIN member m_supervisor ON s.shp_supervisor_id = m_supervisor.member_name  -- 출고 승인자 조인
    </select>

    <!-- 발주 정보 가져오기 -->
    <select id="getAllOrderRequests" resultType="com.itwillbs.domain.OrdersVO"> 
        SELECT o.*, 
               m_manager.member_name AS ord_manager_name, -- 발주 요청자 이름
               m_supervisor.member_name AS ord_supervisor_name -- 발주 승인자 이름
        FROM orders o
        LEFT JOIN member m_manager ON o.ord_manager_id = m_manager.member_id -- 발주 요청자 조인
        LEFT JOIN member m_supervisor ON o.ord_supervisor_id = m_supervisor.member_id -- 발주 승인자 조인
    </select>

    
    <select id="getOrdersName" resultType="com.itwillbs.domain.OrdersVO"> 
    SELECT o.*, 
           m_manager.member_name AS ord_manager_name, -- 발주 요청자 이름
           m_supervisor.member_name AS ord_supervisor_name -- 발주 승인자 이름
    FROM orders o
    LEFT JOIN member m_manager ON o.ord_manager_id = m_manager.member_id -- 발주 요청자 조인
    LEFT JOIN member m_supervisor ON o.ord_supervisor_id = m_supervisor.member_id -- 발주 승인자 조인
    where ord_number = #{ord_number}
</select>
    

    <!-- 출고 요청 최종 수정(업데이트)하는 구문(출고 승인버튼) -->
    <update id="updateShipping" parameterType="com.itwillbs.domain.ShippingVO">
        UPDATE shipping_info
        SET 
            shp_manager_id = #{shp_manager_id},
            shp_supervisor_id = #{shp_supervisor_id},
            shp_number = #{shp_number},
            prod_id = #{prod_id},
            prod_name = #{prod_name},
            prod_category = #{prod_category},
            shp_quantity = #{shp_quantity},
            shp_price = #{shp_price},
            wh_number = #{wh_number},
            company_code = #{company_code},
            shp_date = #{shp_date},
            cord_date = #{cord_date},
            shp_remarks = #{shp_remarks},
            shp_status = '02'  <!-- shp_status를 '02'로 설정 -->
        WHERE shp_number = #{shp_number}; <!-- 수정할 레코드를 식별하는 조건 -->
    </update>
    
    
    
	<!-- 출고 업데이트 구문 (출고 시 자동으로 수량 감소) -->
	<update id="updateStockForShipping" parameterType="com.itwillbs.domain.ShippingVO">
	    UPDATE stock
	    SET prod_qty = prod_qty - #{shp_quantity} 
	    WHERE prod_id = #{prod_id} AND wh_number = #{wh_number}
	    AND prod_qty >= #{shp_quantity}; <!-- 출고 수량이 현재 수량보다 작거나 같을 때만 업데이트 -->
	</update>
	    
    

    <!-- 출고 요청 반려하는 구문 (출고 반려 버튼) -->
    <update id="rejectShipping" parameterType="map">
        UPDATE shipping_info
        SET shp_status = '03'
        WHERE shp_number = #{shp_number};
    </update>

    <!-- 출고 정보 수정 구문 -->
    <update id="editShipping" parameterType="com.itwillbs.domain.ShippingVO">
        UPDATE shipping_info
        SET 
            shp_manager_id = #{shp_manager_id},
            shp_supervisor_id = #{shp_supervisor_id},
            cord_number = #{cord_number},
            prod_category = #{prod_category},
            prod_id = #{prod_id},
            prod_name = #{prod_name},
            shp_quantity = #{shp_quantity},
            shp_price = #{shp_price},
            wh_number = #{wh_number},
            company_code = #{company_code},
            cord_date = #{cord_date},
            shp_date = #{shp_date},
            shp_remarks = #{shp_remarks}
        WHERE shp_number = #{shp_number}; <!-- 수정할 레코드를 식별하는 조건 -->
    </update>

    <!-- 출고 정보 삭제 구문 -->
    <update id="deleteShipping" parameterType="map">
        UPDATE shipping_info
        SET shp_status = '04'
        WHERE shp_number = #{shp_number};
    </update>

    <!-- 상태에 따라 출고 정보 검색하는 구문 -->
    <select id="getShippingByStatus" parameterType="string" resultType="com.itwillbs.domain.ShippingVO">
        SELECT s.*,
	    m_manager.member_name AS shp_manager_name,  -- 입고 요청자 이름(홍길동)
        m_supervisor.member_name AS shp_supervisor_name  -- 입고 승인자 이름
        FROM shipping_info s
        LEFT JOIN member m_manager ON s.shp_manager_id = m_manager.member_id  -- 입고 요청자 조인
        LEFT JOIN member m_supervisor ON s.shp_supervisor_id = m_supervisor.member_id  -- 입고 승인자 조인
	    WHERE shp_status = #{shp_status};
    </select>

	<!-- 거래처 발주 목록 전체 출력 구문 -->
	<select id= "getAllCordersRequests" resultType="com.itwillbs.domain.CordersVO"> 
  	SELECT * FROM corders;
	</select>
	
     <!-- 상태에 따라 거래처발주 정보 검색하는 구문 -->
    <select id="getCordersByStatus" parameterType="string" resultType="com.itwillbs.domain.CordersVO">
        SELECT * FROM corders WHERE cord_status = #{cord_status}
    </select>
	
			
	 <!-- 발주 승인자 목록 조회 -->
	<select id="getShpSupervisorInfo" resultType="com.itwillbs.domain.OrdersVO">
	
 	select m.member_id, m.member_name, d.department_name, c.common_status, m.member_tel 
	from departments d, member m, common c 
	where d.department_id = m.department_id 
	and m.employee_rank = c.common_value 
	and common_work = 'emp_rank' 
	and m.permission_id = '02' 
	and m.member_state = '01' 
	and m.approval_status = '02'

	</select>
	
	
	
<select id="getwhNumberFromStock" parameterType="String" resultType="com.itwillbs.domain.ProdVO">
    SELECT wh_number, prod_qty 
    FROM stock 
    WHERE prod_id = #{prodId}
</select>


	
	
	
	
	
	
</mapper>
