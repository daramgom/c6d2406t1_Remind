<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mapper.ReceivingMapper">
    <!-- namespace를 사용해서 mapper 파일을 찾아오는 주소 설정 -->

    <!-- 입고 정보 입력 -->  
   <insert id="insertRcv" parameterType="com.itwillbs.domain.ReceivingVO">
    INSERT INTO receiving_info (
        rcv_manager_id, 
        rcv_supervisor_id,
        ord_number, 
        prod_id, 
        prod_category, 
        prod_name,
        wh_number, 
        company_code, 
        rcv_quantity, 
        rcv_price, 
        ord_date, 
        rcv_date, 
        rcv_remarks,
        rcv_number,
        rcv_status,  -- rcv_status를 추가
        rcv_count     -- rcv_count를 마지막에 위치
    ) VALUES (
        #{rcv_manager_id}, 
        #{rcv_supervisor_id}, 
        #{ord_number}, 
        #{prod_id}, 
        #{prod_category}, 
        #{prod_name}, 
        #{wh_number}, 
        #{company_code}, 
        #{rcv_quantity}, 
        #{rcv_price}, 
        #{ord_date}, 
        #{rcv_date}, 
        #{rcv_remarks},
        (SELECT CONCAT('RCV-', YEAR(CURRENT_DATE), '-', LPAD(IFNULL(MAX(SUBSTRING(rcv_number, -4)), 0) + 1, 4, '0'))
         FROM (SELECT rcv_number FROM receiving_info WHERE rcv_number LIKE CONCAT('RCV-', YEAR(CURRENT_DATE), '%')) AS temp),
        '01',  -- rcv_status에 '01' 값 추가
        (SELECT COALESCE(MAX(rcv_count), 0) + 1 FROM (SELECT rcv_count FROM receiving_info) AS temp2)  -- rcv_count
    )
	</insert>
	
	<!-- 발주 관리번호로 다른 정보들 가져오기 -->
	<select id="getReceivingByOrderNumber" parameterType="string" resultType="com.itwillbs.domain.OrdersVO">
	SELECT o.*, 
	       p.prod_name, 
	       p.prod_category, 
	       o.ord_price AS rcv_price,
	       m_supervisor.member_name AS ord_supervisor_name, -- 발주 승인자 이름
	       m_manager.member_name AS ord_manager_name -- 발주 요청자 이름
	FROM orders o
	JOIN prod p ON o.prod_id = p.prod_id
	LEFT JOIN member m_supervisor ON o.ord_supervisor_id = m_supervisor.member_id
	LEFT JOIN member m_manager ON o.ord_manager_id = m_manager.member_id
	WHERE o.ord_number = #{ord_number}
	</select>
    
<!-- 입고 정보 가져오기 -->
<select id="getAllReceivingRequests" resultType="com.itwillbs.domain.ReceivingVO">
			SELECT r.*, 
			       m_manager.member_name AS rcv_manager_name,  -- 입고 요청자 이름
			       m_supervisor.member_name AS rcv_supervisor_name,  -- 입고 승인자 이름
			       c.common_status AS rcv_status_name  -- 입고 상태 이름
			FROM receiving_info r
			LEFT JOIN member m_manager ON r.rcv_manager_id = m_manager.member_id  -- 입고 요청자 조인
			LEFT JOIN member m_supervisor ON r.rcv_supervisor_id = m_supervisor.member_id  -- 입고 승인자 조인
			LEFT JOIN common c ON r.rcv_status = c.common_value 
			                   AND c.common_work = 'rcv_status' ; -- 입고 상태 이름 가져오기
</select>

	<!-- 발주 정보 가져오기 -->
<select id="getAllOrderRequests" resultType="com.itwillbs.domain.OrdersVO"> 
    SELECT o.*, 
           m_manager.member_name AS ord_manager_name, -- 발주 요청자 이름
           m_supervisor.member_name AS ord_supervisor_name -- 발주 승인자 이름
    FROM orders o
    LEFT JOIN member m_manager ON o.ord_manager_id = m_manager.member_id -- 발주 요청자 조인
    LEFT JOIN member m_supervisor ON o.ord_supervisor_id = m_supervisor.member_id -- 발주 승인자 조인
</select>

<select id="getOrdersName" resultType="com.itwillbs.domain.OrdersVO"> 
    SELECT o.*, 
           m_manager.member_name AS ord_manager_name, -- 발주 요청자 이름
           m_supervisor.member_name AS ord_supervisor_name -- 발주 승인자 이름
    FROM orders o
    LEFT JOIN member m_manager ON o.ord_manager_id = m_manager.member_id -- 발주 요청자 조인
    LEFT JOIN member m_supervisor ON o.ord_supervisor_id = m_supervisor.member_id -- 발주 승인자 조인
    where ord_number = #{ord_number}
</select>




<!-- 입고 요청 최종 수정(업데이트)하는 구문(입고 승인버튼) -->
<update id="updateReceiving" parameterType="com.itwillbs.domain.ReceivingVO">
    UPDATE receiving_info r
    INNER JOIN orders o ON r.ord_number = o.ord_number
    SET r.rcv_manager_id = #{rcv_manager_id},
        r.rcv_supervisor_id = #{rcv_supervisor_id},
        r.rcv_number = #{rcv_number},
        r.prod_id = #{prod_id},
        r.prod_name = #{prod_name},
        r.prod_category = #{prod_category}, <!-- 추가된 프로드 카테고리 -->
        r.rcv_quantity = #{rcv_quantity},
        r.rcv_price = #{rcv_price},
        r.wh_number = #{wh_number},
        r.company_code = #{company_code},
        r.rcv_date = #{rcv_date},
        r.ord_date = #{ord_date}, <!-- 추가된 발주 날짜 -->
        r.rcv_remarks = #{rcv_remarks},
        r.rcv_status = '02',  <!-- rcv_status를 '02'로 설정 -->
        o.ord_status = '06',  <!-- ord_status를 '06'로 설정 -->
        o.ord_date_change = now()    
        WHERE r.rcv_number = #{rcv_number}; <!-- 수정할 레코드를 식별하는 조건 -->
</update>
	
	<!-- 입고 요청 반려하는 구문 (입고 반려 버튼)-->
	<update id="rejectReceiving" parameterType="map">
    UPDATE receiving_info
    SET rcv_status = '03'
    WHERE rcv_number = #{rcv_number};
	</update>

	<!-- 재고 업데이트 구문 (승인시 자동으로 추가) -->
	<insert id="insertIntoStock" parameterType="com.itwillbs.domain.ReceivingVO">
	    INSERT INTO stock (prod_id, wh_number, prod_qty)
	    VALUES (#{prod_id}, #{wh_number}, #{rcv_quantity})
	    ON DUPLICATE KEY UPDATE prod_qty = prod_qty + #{rcv_quantity}; <!-- 수량 업데이트 -->
	</insert>
	
	<!-- 입고 정보 수정 구문 -->
	<update id="editReceiving" parameterType="com.itwillbs.domain.ReceivingVO">
	    UPDATE receiving_info
	    SET 
	        rcv_manager_id = #{rcv_manager_id},
	        rcv_supervisor_id = #{rcv_supervisor_id}, <!-- 추가된 승인자 ID -->
	        ord_number = #{ord_number},
	        prod_category = #{prod_category}, <!-- 추가된 프로드 카테고리 -->
	        prod_id = #{prod_id},
	        prod_name = #{prod_name},
	        rcv_quantity = #{rcv_quantity},
	        rcv_price = #{rcv_price},
	        wh_number = #{wh_number},  <!-- 창고 번호 업데이트 -->
	        company_code = #{company_code}, <!-- 추가된 거래처 코드 -->
	        ord_date = #{ord_date}, <!-- 추가된 발주 날짜 -->
	        rcv_date = #{rcv_date},
	        rcv_remarks = #{rcv_remarks}
	    WHERE rcv_number = #{rcv_number}; <!-- 수정할 레코드를 식별하는 조건 -->
	</update>
	
	<!-- 입고 정보 삭제 구문 -->
    <update id="deleteReceiving" parameterType="map">
        UPDATE receiving_info
        SET rcv_status = '04'
        WHERE rcv_number = #{rcv_number};
    </update>
	
	<!-- 상태에 따라 입고 정보 검색하는 구문 -->
	<select id="getReceivingByStatus" parameterType="string" resultType="com.itwillbs.domain.ReceivingVO">
		SELECT r.*,
	    m_manager.member_name AS rcv_manager_name,  -- 입고 요청자 이름(홍길동)
        m_supervisor.member_name AS rcv_supervisor_name  -- 입고 승인자 이름
        FROM receiving_info r
        LEFT JOIN member m_manager ON r.rcv_manager_id = m_manager.member_id  -- 입고 요청자 조인
        LEFT JOIN member m_supervisor ON r.rcv_supervisor_id = m_supervisor.member_id  -- 입고 승인자 조인
	    WHERE rcv_status = #{rvc_status};
	</select>
		

	<!-- 발주 번호 조회 구문-->
	<select id="getOrders" resultType="com.itwillbs.domain.OrdersVO">
	
      SELECT ord_number FROM orders;
	
	</select>


		
	 <!-- 발주 승인자 목록 조회 -->
	<select id="getRcvSupervisorInfo" resultType="com.itwillbs.domain.OrdersVO">
	
 	select m.member_id, m.member_name, d.department_name, c.common_status, m.member_tel 
	from departments d, member m, common c 
	where d.department_id = m.department_id 
	and m.employee_rank = c.common_value 
	and common_work = 'emp_rank' 
	and m.permission_id = '02' 
	and m.member_state = '01' 
	and m.approval_status = '02'

	</select>
	

    
</mapper>