<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mapper.ProdMapper">
<!-- mapper 파일 찾아오는 주소 설정 -->


<!-- 제품등록 -->
<insert id="insertProd">
	insert into prod (prod_id, prod_name, prod_reguser, prod_upduser, prod_category, 
	 prod_brand, prod_image, company_code, prod_remarks) 
	  values (#{prod_id}, #{prod_name}, #{prod_reguser}, #{prod_upduser}, #{prod_category}, 
	    #{prod_brand}, #{prod_image}, #{company_code}, #{prod_remarks})
</insert>

<select id="insertList" resultType="ProdVO">
	select company_code, company_name 
	 from company
</select>
<!-- 제품등록 -->



<!-- 제품 목록(List) -->
<select id="listProd" resultType="ProdVO">
	select p.prod_id, coalesce(sum(s.prod_qty), 0) as prod_qty, p.prod_name, p.prod_category, 
	 date_format(p.prod_regdate, '%Y-%m-%d (%a) %H:%i') as formatted_regdate, p.prod_brand, 
      p.prod_image, c.company_name 
	   from prod p 
	    left join stock s on p.prod_id = s.prod_id  join company c on p.company_code = c.company_code 
	     where p.prod_status != '02' 
	      group by p.prod_id
</select>
<!-- 제품 목록(List) -->



<!-- 제품 조회 -->
<select id="findProd" resultType="ProdVO">
	select p.prod_id, p.prod_name, p.prod_category, p.prod_regdate, 
	 p.prod_reguser, p.prod_upduser, m_reg.member_name as prod_regname, m_upd.member_name prod_updname,  
	  p.prod_brand, p.prod_image, p.prod_upddate, p.company_code, c.company_name, p.prod_remarks, 
	   date_format(p.prod_regdate, '%Y-%m-%d (%a) %H:%i') as formatted_regdate, 
	    date_format(p.prod_upddate, '%Y-%m-%d (%a) %H:%i') as formatted_upddate 
	from prod p 
	 join company c on p.company_code = c.company_code 
	  left join member m_reg on p.prod_reguser = m_reg.member_id 
	   left join member m_upd on p.prod_upduser = m_upd.member_id 
		where p.prod_id = 'P-3G4OCA-1004' and p.prod_status != '02'
</select>

<select id="findProdList" resultType="ProdVO">
	select p.prod_id, p.prod_name, p.prod_brand, s.wh_number, s.prod_qty, w.wh_name, w.wh_location, w.wh_dt_location
	 from prod p join stock s on p.prod_id = s.prod_id join warehouse w on s.wh_number = w.wh_number
      where p.prod_id = #{prod_id} and p.prod_status != '02'
</select>
<!-- 제품 조회 -->



<!-- 제품 수정 -->
<update id="updateProd">
	update prod  
	 set prod_name = #{prod_name}, prod_category = #{prod_category}, prod_brand = #{prod_brand}, 
	  prod_remarks = #{prod_remarks}, prod_image = #{prod_image}, prod_upduser = #{prod_upduser} 
	  	where prod_id = #{prod_id}
</update>
<!-- 제품 수정 -->



<!-- 제품 삭제 -->
<update id="deleteProd">
	update prod 
	 set prod_status = '02' 
	  where prod_id = #{prod_id}  
	   and not exists (select 1 
	  				    from stock 
	  				     where prod_id = #{prod_id} 
	  				      and prod_qty > 0)
</update>
<!-- 제품 삭제 -->



<!-- 재고 이동 -->
<update id="transferProd">
	update stock  
	 set prod_qty = prod_qty - #{stock_qty}  
	  where prod_id = #{prod_id} and wh_number = #{wh_number}
</update>

<insert id="transferProd2">
    insert into stock (prod_id, wh_number, prod_qty) 
     values (#{prod_id}, #{stock_wh}, #{stock_qty}) 
      on duplicate key update 
       prod_qty = coalesce(prod_qty, 0) + #{stock_qty}
</insert>

<insert id="stockMove">
	insert into inven_move (prod_id, from_wh, to_wh, stock_qty, member_id) 
	 values (#{prod_id}, #{wh_number}, #{stock_wh}, #{stock_qty}, #{prod_reguser})
</insert>

<select id="transferSelect" resultType="ProdVO">
	select distinct p.prod_id, p.prod_name, p.prod_image, p.prod_brand 
	 from prod p 
	  join stock s on p.prod_id = s.prod_id 
	   where p.prod_status != '02'
</select>

<select id="transferSelect2" resultType="ProdVO">
	select s.wh_number, w.wh_name, w.wh_location, w.wh_dt_location, s.prod_qty 
	 from stock s 
	  left join warehouse w on s.wh_number = w.wh_number 
	   where s.prod_id = #{prod_id}
</select>

<select id="transferSelect3" resultType="ProdVO">
	select wh_number, wh_name, wh_location, wh_dt_location 
	 from warehouse 
</select>
<!-- 재고 이동 -->


<!-- 재고 알람 설정 -->
<update id="setStock">
	update prod  
	 set prod_stock = #{prod_stock} 
	  where prod_id = #{prod_id}
</update>

<select id="setStockList" resultType="ProdVO">
	select p.prod_id, p.prod_name, 
	 p.prod_brand, p.prod_image, coalesce(sum(s.prod_qty), 0) as prod_qty, p.prod_stock
	   from prod p 
		join stock s on p.prod_id = s.prod_id
	     where p.prod_status != '02' 
	      group by p.prod_id;
</select>
<!-- 재고 알람 설정 -->



</mapper>